// Color Utilities

/**
 * Système de couleurs HSL (Hue, Saturation, Lightness)
 * -------------------------------------------------
 * 
 * Ce module fournit des outils pour travailler avec des couleurs au format HSL
 * qui offre plusieurs avantages par rapport aux formats HEX et RGB:
 * 
 * Avantages du format HSL:
 * 1. Plus intuitif: H (teinte) représente la couleur, S (saturation) l'intensité, L (luminosité) la clarté
 * 2. Facilité pour créer des variantes: il suffit de modifier un seul paramètre
 * 3. Cohérence visuelle: les couleurs restent dans la même famille en ajustant seulement la luminosité
 * 4. Facilite la création de thèmes complets à partir d'une seule couleur de base
 * 
 * Utilisation:
 * 
 * 1. Définir les variables HSL de base dans votre thème:
 *    --primary-h: 210;    // Teinte (0-360): 0=rouge, 120=vert, 240=bleu
 *    --primary-s: 70%;    // Saturation (0-100%): 0=gris, 100%=couleur pure
 *    --primary-l: 50%;    // Luminosité (0-100%): 0=noir, 100%=blanc
 * 
 * 2. Utiliser ces variables pour créer des variations:
 *    --primary-color: hsl(var(--primary-h), var(--primary-s), var(--primary-l));
 *    --primary-light: hsl(var(--primary-h), var(--primary-s), 60%);
 *    --primary-dark: hsl(var(--primary-h), var(--primary-s), 40%);
 * 
 * 3. Pour créer un thème complet facilement:
 *    @include create-color-scheme(210, 70%, 50%);
 */

// HSL Color conversion and manipulation utilities

// Import the functions
@use '../base/functions' as f;

/**
 * Génère les variables HSL à partir d'une map de couleurs
 * 
 * @param {Map} $colors-map - Map de couleurs au format HEX ou RGB
 * 
 * Exemple:
 * $colors: (
 *   'primary': #3182ce,
 *   'secondary': #2c5282
 * );
 * @include generate-hsl-theme($colors);
 */
@mixin generate-hsl-theme($colors-map) {
  // Base HSL color variables
  @each $key, $color in $colors-map {
    @if type-of($color) == color {
      $hsl: f.hex-to-hsl-values($color);
      $hue: map-get($hsl, h);
      $saturation: map-get($hsl, s);
      $lightness: map-get($hsl, l);
      
      // Generate CSS variables for the base HSL components
      --#{$key}-h: #{$hue};
      --#{$key}-s: #{$saturation};
      --#{$key}-l: #{$lightness};
      
      // Generate the actual HSL color
      --#{$key}-color: hsl(var(--#{$key}-h), var(--#{$key}-s), var(--#{$key}-l));
      
      // Generate light/dark variants if needed
      --#{$key}-light: hsl(var(--#{$key}-h), var(--#{$key}-s), #{min($lightness + 10%, 95%)});
      --#{$key}-dark: hsl(var(--#{$key}-h), var(--#{$key}-s), #{max($lightness - 10%, 5%)});
    }
  }
}

/**
 * Crée une palette complète de couleurs à partir d'une seule couleur HSL
 * Génère 10 niveaux de luminosité (50-900) pour la même teinte
 * 
 * @param {Number} $hue - Teinte (0-360)
 * @param {Percentage} $saturation - Saturation (0-100%)
 * @param {Percentage} $lightness - Luminosité (0-100%)
 * @param {String} $prefix - Préfixe pour les variables CSS
 * 
 * Exemple:
 * @include create-color-palette-from-hsl(210, 70%, 50%, 'primary');
 */
@mixin create-color-palette-from-hsl($hue, $saturation, $lightness, $prefix: 'color') {
  // Base HSL
  --#{$prefix}-h: #{$hue};
  --#{$prefix}-s: #{$saturation};
  --#{$prefix}-l: #{$lightness};
  
  // Base color
  --#{$prefix}: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), var(--#{$prefix}-l));
  
  // Lighter variants
  --#{$prefix}-50: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 95%);
  --#{$prefix}-100: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 90%);
  --#{$prefix}-200: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 80%);
  --#{$prefix}-300: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 70%);
  --#{$prefix}-400: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 60%);
  
  // Base
  --#{$prefix}-500: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 50%);
  
  // Darker variants
  --#{$prefix}-600: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 40%);
  --#{$prefix}-700: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 30%);
  --#{$prefix}-800: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 20%);
  --#{$prefix}-900: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), 10%);
}

/**
 * Crée un schéma de couleurs complet à partir d'une couleur primaire
 * Génère des couleurs complémentaires, analogues et triadiques
 * 
 * @param {Number} $primary-hue - Teinte principale (0-360)
 * @param {Percentage} $primary-saturation - Saturation principale
 * @param {Percentage} $primary-lightness - Luminosité principale
 * 
 * Exemple:
 * @include create-color-scheme(210, 70%, 50%);
 */
@mixin create-color-scheme($primary-hue, $primary-saturation, $primary-lightness) {
  // Primary color
  @include create-color-palette-from-hsl($primary-hue, $primary-saturation, $primary-lightness, 'primary');
  
  // Complementary color (opposite on the color wheel)
  $complementary-hue: ($primary-hue + 180) % 360;
  @include create-color-palette-from-hsl($complementary-hue, $primary-saturation, $primary-lightness, 'complementary');
  
  // Analogous colors (adjacent on the color wheel)
  $analogous1-hue: ($primary-hue + 30) % 360;
  $analogous2-hue: ($primary-hue + 330) % 360;
  @include create-color-palette-from-hsl($analogous1-hue, $primary-saturation, $primary-lightness, 'analogous1');
  @include create-color-palette-from-hsl($analogous2-hue, $primary-saturation, $primary-lightness, 'analogous2');
  
  // Triadic colors (form a triangle on the color wheel)
  $triadic1-hue: ($primary-hue + 120) % 360;
  $triadic2-hue: ($primary-hue + 240) % 360;
  @include create-color-palette-from-hsl($triadic1-hue, $primary-saturation, $primary-lightness, 'triadic1');
  @include create-color-palette-from-hsl($triadic2-hue, $primary-saturation, $primary-lightness, 'triadic2');
}

/**
 * Convertit les couleurs HEX en HSL pour un thème entier
 * Utile pour transformer des thèmes existants
 * 
 * @param {String} $selector - Sélecteur CSS pour le thème
 * 
 * Exemple:
 * @include convert-theme-to-hsl('.dark-theme') {
 *   // Variables du thème
 * }
 */
@mixin convert-theme-to-hsl($selector) {
  #{$selector} {
    @content;
  }
} 
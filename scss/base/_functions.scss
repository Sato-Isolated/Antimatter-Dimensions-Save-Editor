// SCSS utility functions

// Get a specific color from a theme
@function theme-color($theme, $color) {
  @if map-has-key($colors, $theme) {
    $theme-map: map-get($colors, $theme);
    @if map-has-key($theme-map, $color) {
      @return map-get($theme-map, $color);
    } @else {
      @error "Color #{$color} does not exist in theme #{$theme}";
    }
  } @else {
    @error "Theme #{$theme} does not exist in the $colors map";
  }
}

// Convert px to rem
@function rem($size) {
  $rem-size: $size / 16px;
  @return #{$rem-size}rem;
}

// Adjust color brightness (lighter or darker)
@function adjust-color-brightness($color, $percentage) {
  @if $percentage > 0 {
    @return mix(white, $color, $percentage);
  } @else {
    @return mix(black, $color, abs($percentage));
  }
}

// Create a readable text color based on background color
@function readable-color($background-color) {
  $brightness: (red($background-color) * 299 + green($background-color) * 587 + blue($background-color) * 114) / 1000;
  @if $brightness >= 150 {
    @return #000000;
  } @else {
    @return #ffffff;
  }
}

// Convert a HEX color to RGB
@function hex-to-rgb($hex) {
  @return red($hex), green($hex), blue($hex);
}

// Generate a color with transparency
@function rgba-color($color, $opacity) {
  @return rgba($color, $opacity);
}

// Convert a HEX color to HSL
@function hex-to-hsl($hex) {
  // Sass automatically converts hex to hsl when using hsl functions
  $hue: hue($hex);
  $saturation: saturation($hex);
  $lightness: lightness($hex);
  
  // Return as hsl string
  @return hsl($hue, $saturation, $lightness);
}

// Convert a HEX color to HSL values as a map
@function hex-to-hsl-values($hex) {
  @return (
    h: hue($hex),
    s: saturation($hex),
    l: lightness($hex)
  );
}

// Convert RGB color to HSL
@function rgb-to-hsl($r, $g, $b) {
  $color: rgb($r, $g, $b);
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  
  @return hsl($hue, $saturation, $lightness);
}

// Convert RGB color to HSL values as a map
@function rgb-to-hsl-values($r, $g, $b) {
  $color: rgb($r, $g, $b);
  
  @return (
    h: hue($color),
    s: saturation($color),
    l: lightness($color)
  );
}

// Create HSL variations of a color
@function lighten-hsl($color, $amount) {
  $hsl: hex-to-hsl-values($color);
  @return hsl(map-get($hsl, h), map-get($hsl, s), min(map-get($hsl, l) + $amount, 100%));
}

@function darken-hsl($color, $amount) {
  $hsl: hex-to-hsl-values($color);
  @return hsl(map-get($hsl, h), map-get($hsl, s), max(map-get($hsl, l) - $amount, 0%));
}

@function saturate-hsl($color, $amount) {
  $hsl: hex-to-hsl-values($color);
  @return hsl(map-get($hsl, h), min(map-get($hsl, s) + $amount, 100%), map-get($hsl, l));
}

@function desaturate-hsl($color, $amount) {
  $hsl: hex-to-hsl-values($color);
  @return hsl(map-get($hsl, h), max(map-get($hsl, s) - $amount, 0%), map-get($hsl, l));
}

// Convert a theme's colors to HSL format
@function convert-theme-to-hsl($theme-map) {
  $hsl-theme: ();
  
  @each $key, $value in $theme-map {
    @if type-of($value) == color {
      $hsl-value: hex-to-hsl($value);
      $hsl-theme: map-merge($hsl-theme, ($key: $hsl-value));
    } @else {
      $hsl-theme: map-merge($hsl-theme, ($key: $value));
    }
  }
  
  @return $hsl-theme;
}

// Generate HSL color variations for a theme
@mixin create-hsl-theme-variables($base-color, $prefix: 'primary') {
  $hsl: hex-to-hsl-values($base-color);
  $hue: map-get($hsl, h);
  $saturation: map-get($hsl, s);
  $lightness: map-get($hsl, l);
  
  --#{$prefix}-h: #{$hue};
  --#{$prefix}-s: #{$saturation};
  --#{$prefix}-l: #{$lightness};
  --#{$prefix}-color: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), var(--#{$prefix}-l));
  --#{$prefix}-color-light: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), #{min($lightness + 10%, 95%)});
  --#{$prefix}-color-lighter: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), #{min($lightness + 20%, 95%)});
  --#{$prefix}-color-dark: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), #{max($lightness - 10%, 5%)});
  --#{$prefix}-color-darker: hsl(var(--#{$prefix}-h), var(--#{$prefix}-s), #{max($lightness - 20%, 5%)});
} 